using System.Text.Json.Generated;
using System.Text.Json;
using System.Globalization;

namespace {{type.namespace}}
{
    public partial {{type.declaration_type | string.downcase}} {{type.name}} : IJsonSerializable<{{type.name}}>
    {
        {{~if !type.has_parent~}}
        public void SerializeToJson(Utf8JsonWriter writer) 
        {
            writer.WriteStartObject();
            
            WriteProperties(writer);
            
            writer.WriteEndObject();
        }
        {{end~}}

        protected {{if type.has_parent}}override{{else}}virtual{{end}} void WriteProperties(Utf8JsonWriter writer)
        {
            {{~for property in type.properties~}}
              {{~property_name_constant = type.name + "SerializerConstants." + property.name + "PropertyName"~}}
              {{~if property.json_type == "Object"~}}
            writer.WritePropertyName({{property_name_constant}});
            {{property.name}}.SerializeToJson(writer);
              {{~else if property.json_type == "External"~}}
            writer.WritePropertyName({{property_name_constant}});
            ForeignTypeSerializer.SerializeToJson({{property.name}}, writer);
              {{~else~}}
            writer.{{~ get_write_method_name(property.json_type)-}}({{property_name_constant}}, {{property.name}});
              {{~end~}}
            {{~end~}}
            {{~if type.has_parent~}}
            base.WriteProperties(writer);
            {{~end~}}
        }
    }
    
    internal class {{type.name}}SerializerConstants 
    {
        {{~for property in type.properties~}}   
        internal static readonly JsonEncodedText {{property.name}}PropertyName = JsonEncodedText.Encode("{{property.name}}");
        {{~end~}}
    }
}
