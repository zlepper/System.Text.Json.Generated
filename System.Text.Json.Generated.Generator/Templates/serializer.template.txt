using System.Text.Json.Generated;
using System.Text.Json;
using System.Globalization;

namespace {{type.namespace}}
{
    public partial {{type.declaration_type | string.downcase}} {{type.name}} : IJsonSerializable
    {
        public void SerializeToJson(Utf8JsonWriter writer) 
        {
            writer.WriteStartObject();
            
            WriteProperties(writer);
            
            writer.WriteEndObject();
        }
        
        protected void WriteProperties(Utf8JsonWriter writer)
        {
            {{~for property in type.properties~}}
              {{~property_name_constant = type.name + "SerializerConstants." + property.name + "PropertyName"~}}
              {{~if property.json_type == "Dictionary"~}}
            writer.WriteStartObject({{property_name_constant}});
            foreach(var keyValuePair in {{property.name}})
            {
                writer.{{get_write_method_name(property.dictionary_property_type.value_type)}}({{get_dictionary_key_output(property.dictionary_property_type.key_type, "keyValuePair.Key")}}, keyValuePair.Value);
            }
            writer.WriteEndObject();
              {{~else if property.json_type == "Object"~}}
                // TODO: Implement special handling here
              {{~else~}}
            writer.{{~ get_write_method_name(property.json_type)-}}({{property_name_constant}}, {{property.name}});
              {{~end~}}
            {{~end~}}
        }
    }
    
    internal class {{type.name}}SerializerConstants 
    {
        {{~for property in type.properties~}}   
        internal static readonly JsonEncodedText {{property.name}}PropertyName = JsonEncodedText.Encode("{{property.name}}");
        {{~end~}}
    }
}
