using System.Text.Json.Generated;
using System.Text.Json;
using System.Globalization;

{{~
func create_dictionary(key, toIterate, dictionaryType, nestLevel = 2)
    indent = "                " + ("    " * (nestLevel - 2))
    indent + "writer.WriteStartObject(" + key + ");\n"
    item = "keyValuePair" + nestLevel
    indent + "foreach(var " + item + " in " + toIterate + ")\n"
    indent + "{\n"
    if dictionaryType.value_type == "Dictionary"
        create_dictionary(item + ".Key", item + ".Value", dictionaryType.dictionary_property_type, nestLevel + 1)
    else
        indent + "    writer." + get_write_method_name(dictionaryType.value_type) + "(" + get_dictionary_key_output(dictionaryType.key_type, item + ".Key") + ", " + item + ".Value);\n"
    end
    # Apparently the variable scope isn't restored correctly, so we have to recreate it
    indent = "                " + ("    " * (nestLevel - 2))
    indent + "}\n"
    indent + "writer.WriteEndObject();\n";
end
-}}

namespace {{type.namespace}}
{
    public partial {{type.declaration_type | string.downcase}} {{type.name}} : IJsonSerializable
    {
        public void SerializeToJson(Utf8JsonWriter writer) 
        {
            writer.WriteStartObject();
            
            WriteProperties(writer);
            
            writer.WriteEndObject();
        }
        
        protected void WriteProperties(Utf8JsonWriter writer)
        {
            {{~for property in type.properties~}}
              {{~property_name_constant = type.name + "SerializerConstants." + property.name + "PropertyName"~}}
              {{~if property.json_type == "Dictionary"~}}
            writer.WriteStartObject({{property_name_constant}});
            foreach(var keyValuePair1 in {{property.name}})
            {
                {{~if property.dictionary_property_type.value_type == "Dictionary"~}}
                {{~create_dictionary(get_dictionary_key_output(property.dictionary_property_type.key_type, "keyValuePair1.Key"), "keyValuePair1.Value", property.dictionary_property_type.dictionary_property_type)~}}
                {{~else~}}
                writer.{{get_write_method_name(property.dictionary_property_type.value_type)}}({{get_dictionary_key_output(property.dictionary_property_type.key_type, "keyValuePair1.Key")}}, keyValuePair1.Value);
                {{~end~}}
            }
            writer.WriteEndObject();
              {{~else if property.json_type == "Object"~}}
            writer.WritePropertyName({{property_name_constant}});
            {{property.name}}.SerializeToJson(writer);
              {{~else~}}
            writer.{{~ get_write_method_name(property.json_type)-}}({{property_name_constant}}, {{property.name}});
              {{~end~}}
            {{~end~}}
        }
    }
    
    internal class {{type.name}}SerializerConstants 
    {
        {{~for property in type.properties~}}   
        internal static readonly JsonEncodedText {{property.name}}PropertyName = JsonEncodedText.Encode("{{property.name}}");
        {{~end~}}
    }
}
